name: Build & Publish Wheels

on:
  push:
    branches: [ "main" ]
    tags:
      - "v*.*.*"
  pull_request:

permissions:
  contents: read

jobs:
  build_wheels:
    name: Build wheels (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-22.04
            env:
              # Build only CPython 3.10â€“3.13
              CIBW_BUILD: "cp310-manylinux_x86_64 cp311-manylinux_x86_64 cp312-manylinux_x86_64 cp313-manylinux_x86_64"
              # Ensure manylinux2014, and be explicit about the plat during repair
              CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
              CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair --plat manylinux2014_x86_64 -w {dest_dir} {wheel}"
              # Silence warnings; keep your CMake flags authoritative
              CXXFLAGS: "-w"
              CFLAGS: "-w"

          # Windows amd64
          - os: windows-2022
            env:
              CIBW_BUILD: "cp310-win_amd64 cp311-win_amd64 cp312-win_amd64 cp313-win_amd64"
              # MSVC: lower warnings
              CL: "/W0"

          # macOS Intel
          - os: macos-13
            env:
              CIBW_BUILD: "cp310-macosx_x86_64 cp311-macosx_x86_64 cp312-macosx_x86_64 cp313-macosx_x86_64"
              # Make sure CMake targets the correct arch and a compatible deployment target
              CIBW_ENVIRONMENT_MACOS: "MACOSX_DEPLOYMENT_TARGET=10.9 CMAKE_OSX_ARCHITECTURES=x86_64"
              # Also set via CMake variables (scikit-build will pass them through)
              CMAKE_OSX_ARCHITECTURES: "x86_64"
              CMAKE_OSX_DEPLOYMENT_TARGET: "10.9"
              CXXFLAGS: "-w"
              CFLAGS: "-w"

          # macOS Apple Silicon
          - os: macos-14
            env:
              CIBW_BUILD: "cp310-macosx_arm64 cp311-macosx_arm64 cp312-macosx_arm64 cp313-macosx_arm64"
              CIBW_ENVIRONMENT_MACOS: "MACOSX_DEPLOYMENT_TARGET=11.0 CMAKE_OSX_ARCHITECTURES=arm64"
              CAME_OSX_ARCHITECTURES: "arm64"
              CMAKE_OSX_DEPLOYMENT_TARGET: "11.0"
              CXXFLAGS: "-w"
              CFLAGS: "-w"

  upload_testpypi_on_push:
    needs: build_wheels
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels-Linux
          path: dist
        continue-on-error: true
      - uses: actions/download-artifact@v4
        with:
          name: wheels-Windows
          path: dist
        continue-on-error: true
      - uses: actions/download-artifact@v4
        with:
          name: wheels-macOS
          path: dist
        continue-on-error: true

      - name: Show built wheels
        run: ls -al dist || true

      - name: Publish to TestPyPI (dev builds)
        env:
          TWINE_NON_INTERACTIVE: 1
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          python -m pip install twine
          twine upload --repository-url https://test.pypi.org/legacy/ dist/*.whl || true

  upload_pypi_on_tag:
    needs: build_wheels
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels-Linux
          path: dist
        continue-on-error: true
      - uses: actions/download-artifact@v4
        with:
          name: wheels-Windows
          path: dist
        continue-on-error: true
      - uses: actions/download-artifact@v4
        with:
          name: wheels-macOS
          path: dist
        continue-on-error: true

      - name: Show built wheels
        run: ls -al dist || true

      - name: Publish to PyPI
        env:
          TWINE_NON_INTERACTIVE: 1
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m pip install twine
          twine upload dist/*.whl
